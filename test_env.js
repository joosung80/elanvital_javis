/**
 * ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω ÏÑ§Ï†ï ÌååÏùº
 * Î™®Îì† ÌÖåÏä§Ìä∏ ÌååÏùºÏóêÏÑú Ïù¥ ÌååÏùºÏùÑ Î®ºÏ†Ä requireÌïòÏó¨ ÌôòÍ≤Ω Î≥ÄÏàòÎ•º Î°úÎìú
 */

// dotenv Î°úÎìú
require('dotenv').config();

console.log('üîß ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω ÏÑ§Ï†ï ÏôÑÎ£å');
console.log('üìã ÌôòÍ≤Ω Î≥ÄÏàò ÏÉÅÌÉú:');
console.log('  - OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÏóÜÏùå');
console.log('  - GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÏóÜÏùå');
console.log('  - DISCORD_TOKEN:', process.env.DISCORD_TOKEN ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÏóÜÏùå');

module.exports = {
    // ÌôòÍ≤Ω Î≥ÄÏàò Í≤ÄÏ¶ù Ìï®Ïàò
    validateEnv: () => {
        const required = ['OPENAI_API_KEY', 'GEMINI_API_KEY', 'DISCORD_TOKEN'];
        const missing = required.filter(key => !process.env[key]);
        
        if (missing.length > 0) {
            throw new Error(`ÌïÑÏàò ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§: ${missing.join(', ')}`);
        }
        
        return true;
    },
    
    // ÌÖåÏä§Ìä∏Ïö© ÌôòÍ≤Ω Î≥ÄÏàò Ï∂úÎ†•
    logEnvStatus: () => {
        console.log('\n=== ÌôòÍ≤Ω Î≥ÄÏàò ÏÉÅÌÉú ===');
        console.log('OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? `${process.env.OPENAI_API_KEY.substring(0, 20)}...` : 'NOT SET');
        console.log('GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? `${process.env.GEMINI_API_KEY.substring(0, 20)}...` : 'NOT SET');
        console.log('DISCORD_TOKEN:', process.env.DISCORD_TOKEN ? `${process.env.DISCORD_TOKEN.substring(0, 20)}...` : 'NOT SET');
        console.log('========================\n');
    }
};
